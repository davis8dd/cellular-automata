(ns cellular-automata.core-test
  (:require [clojure.test :refer :all]
            [cellular-automata.core :refer :all]))

(deftest test-create-rule-with-int-less-than-0
  (testing "Validate boolean array generated by a rule."
    (is (= nil (create-rule -1)))))

(deftest test-create-rule-with-int-greater-than-255
  (testing "Validate boolean array generated by a rule."
    (is (= nil (create-rule 256)))))

(deftest test-create-rule-with-valid-int
  (testing "Validate boolean array generated by a rule."
    (let [expected-value {[false false false] true, [true false false] true, [false true false] true, [false false true] true, [true true false] true, [true false true] true, [false true true] true, [true true true] true}]
      (is (= expected-value (create-rule 155))))))

(deftest test-int-to-bool-array-with-valid-8-bit-int-expect-bool-flag-array
  (testing "Passing a valid int generates a boolean array matching the integer as bits."
    (let [expected-value [true true true false true false false true]]
      (is (= (int-to-bool-array 233) expected-value)))))

(deftest test-int-to-bool-array-with-valid-6-bit-int-expect-8-bit-bool-flag-array
  (testing "Passing a valid int generates a boolean array matching the integer as bits."
    (let [expected-value [false false true false false false true false]]
      (is (= (int-to-bool-array 34) expected-value)))))

(deftest test-pad-front-to-length-with-8-given-empty-and-space-expect-8-spaces
  (testing "Expect a thing.")
    (let [initial-array [1 2 3]
          padding 0
          final-size 5
          expected-value [0 0 1 2 3]]
      (is (= (pad-front-to-length-with initial-array final-size padding) expected-value))))
